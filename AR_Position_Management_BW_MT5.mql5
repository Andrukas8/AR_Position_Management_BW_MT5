//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2020, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+
#include <Trade/Trade.mqh>

input ENUM_TIMEFRAMES TimeFrame = PERIOD_H1; // Time frame
input int TslOffsetPoints = 20; // Points above/below the MA
input double breakevenRatio = 1; // Break Even Ratio
input int MaPeriod = 8; // MA Period
input int MaShift = 5; // MA Shift

input ENUM_MA_METHOD TslMaMethod = MODE_SMMA; // MA Method
input ENUM_APPLIED_PRICE TslMaAppPrice = PRICE_MEDIAN; // MA Price

int barsTotal;

double mainUpper = 0;
double mainLower = 0;

double mainUpperFractal = 0;
double mainLowerFractal = 0;

input bool fractalsTSL = false;
input bool movingAverageTSL = false;

int maShift;

int handleFractal;
int handleMA;

string text;

struct StopLoss
  {
   ulong             posTicketArr;
   double            posSlArr;
  };

StopLoss originalPosSlArr[];


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   handleFractal = iFractals(_Symbol, TimeFrame);
   handleMA = iMA(_Symbol, TimeFrame, MaPeriod, MaShift, TslMaMethod, TslMaAppPrice);

   long totalPos = PositionsTotal();

   for(int i = 0; i < totalPos; i++)
     {
      ulong originalPosTicket = PositionGetTicket(i);
      if(PositionSelectByTicket(originalPosTicket))

        {
         double originalPosSl = NormalizeDouble(PositionGetDouble(POSITION_SL),4);
         if(PositionGetString(POSITION_SYMBOL) == _Symbol)
           {
            ArrayResize(originalPosSlArr,i+1);
            originalPosSlArr[i].posTicketArr = originalPosTicket;
            originalPosSlArr[i].posSlArr = originalPosSl;

           }
        }
     }

   Print("Init successful");

   return (INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {

//--- clear comments
   Comment("");
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {
   int bars = iBars(_Symbol, TimeFrame);
   int totalPos = PositionsTotal();

   if(barsTotal != bars && totalPos > 0)  // New bar appeared on the chart
     {
      barsTotal = bars;

      double fracUpper[];
      double fracLower[];

      CopyBuffer(handleFractal, UPPER_LINE, 3, 1, fracUpper);
      CopyBuffer(handleFractal, LOWER_LINE, 3, 1, fracLower);

      if(fracUpper[0] != EMPTY_VALUE)
        {
         mainUpper = NormalizeDouble(fracUpper[0] + TslOffsetPoints * _Point, 4);
        }

      if(fracLower[0] != EMPTY_VALUE)
        {
         mainLower = NormalizeDouble(fracLower[0] - TslOffsetPoints * _Point, 4);
        }

      text = "-----------------------------\nPosition Management EA\n";
      text += "------------------------------\n";
      text += "Upper Fractal = " + DoubleToString(mainUpper, 4) + "\n";
      text += "Lower Fractal = " + DoubleToString(mainLower, 4) + "\n";
      text += "MA: Period = " + (string)MaPeriod +  " | Shift = " + (string)MaShift + " | TF = "  + (string)TimeFrame + "\n";
      text += "Fractal TSL = [ " + (string)fractalsTSL + " ]\n"+ "Moving Average TSL = [ " + (string)movingAverageTSL + " ]\n";

      for(int i = 0; i < totalPos; i++)
        {
         ulong posTicket = PositionGetTicket(i);

         if(PositionSelectByTicket(posTicket))
           {
            if(PositionGetString(POSITION_SYMBOL) == _Symbol)
              {
               CTrade trade;
               double posOpenPrice = NormalizeDouble(PositionGetDouble(POSITION_PRICE_OPEN),4);
               double posSl = NormalizeDouble(PositionGetDouble(POSITION_SL),4);
               double posTp = NormalizeDouble(PositionGetDouble(POSITION_TP),4);

               double bid = NormalizeDouble(SymbolInfoDouble(_Symbol, SYMBOL_BID),4);
               double ask = NormalizeDouble(SymbolInfoDouble(_Symbol, SYMBOL_ASK),4);

               double ma[];
               CopyBuffer(handleMA,MAIN_LINE,1,MaShift,ma);

               if(fractalsTSL)
                 {
                  // --------------------
                  // --- BUY POSITION ---
                  // --------------------

                  if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)  // checking if the open position if has type BUY
                    {
                     // ---
                     if(posSl < mainLower && bid > mainLower)
                       {
                        double sl = mainLower;

                        if(sl > posSl)
                          {
                           Print("sl > posSl ",sl," ", posSl);
                           if(trade.PositionModify(posTicket, sl, posTp))//;

                             {
                              Print(__FUNCTION__, " > Position #", posTicket, " was modified by Fractal tsl. BUY");
                             }
                          }
                       }
                    }

                  // ---------------------
                  // --- SELL POSITION ---
                  // ---------------------
                  if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
                    {
                     //---
                     if(posSl > mainUpper && ask < mainUpper)
                       {
                        double sl = mainUpper;

                        if(sl < posSl || posSl == 0)  //&& sl > mainUpper
                          {
                           if(trade.PositionModify(posTicket, sl, posTp))//;

                             {
                              Print(__FUNCTION__, " > Position #", posTicket, " was modified by Fractal tsl. SELL");
                             }
                          }
                       }
                    }
                 } // end of if fractals

               if(movingAverageTSL)
                 {

                  // --------------------
                  // --- BUY POSITION ---
                  // --------------------

                  if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
                    {
                     if(ArraySize(ma) > 0)
                       {
                        double sl = NormalizeDouble(ma[MaShift - 1] - TslOffsetPoints * _Point,4);

                        if(sl > posSl && sl < bid)
                          {
                           if(trade.PositionModify(posTicket,sl,posTp))//;
                             {
                              Print(__FUNCTION__," > Position #",posTicket," was modified by ma tsl.");
                             }
                          }
                       }
                    }

                  // ---------------------
                  // --- SELL POSITION ---
                  // ---------------------

                  if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
                    {
                     if(ArraySize(ma) > 0)
                       {
                        double sl = NormalizeDouble(ma[MaShift - 1] + TslOffsetPoints * _Point,4);
                        if(sl < posSl || posSl == 0)
                          {
                           if(trade.PositionModify(posTicket,sl,posTp))//;
                             {
                              Print(__FUNCTION__," > Position #",posTicket," was modified by ma tsl.");
                             }
                          }

                       }
                    }

                 } // end of moving average

               //+------------------------------------------------------------------+
               //|         Break Even                                               |
               //+------------------------------------------------------------------+

               double oldPosSl;

               for(int j=0; j<originalPosSlArr.Size(); j++)
                 {
                  if(originalPosSlArr[j].posTicketArr==posTicket)
                    {
                     oldPosSl = NormalizeDouble(originalPosSlArr[j].posSlArr,4);
                    }
                 }

               if(breakevenRatio > 0 && NormalizeDouble(posOpenPrice,4) != oldPosSl && posOpenPrice != posSl)
                 {
                  if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)  // checking if the open position if has type BUY
                    {
                     if(NormalizeDouble(bid - posOpenPrice,4) > NormalizeDouble((posOpenPrice - oldPosSl)*breakevenRatio,4)
                        && posSl < posOpenPrice)
                       {
                        double sl = posOpenPrice;
                        if(trade.PositionModify(posTicket, sl, posTp))//;

                          {
                           Print(__FUNCTION__, " > Position #", posTicket, " was modified by Breakeven BUY");
                          }
                       }
                    }

                  if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL) // checking if the open position has type SELL
                    {
                     if(NormalizeDouble(posOpenPrice - ask,4) > NormalizeDouble((oldPosSl - posOpenPrice)*breakevenRatio,4)
                        && posSl > posOpenPrice)
                       {
                        double sl = posOpenPrice;
                        if(trade.PositionModify(posTicket, sl, posTp))//;

                          {
                           Print(__FUNCTION__, " > Position #", posTicket, " was modified by Breakeven SELL");
                          }
                       }

                    }
                 } // Breakeven ratio > 0

               // -----------------------

              } // PositionGetString(POSITION_SYMBOL) == _Symbol

           } // PositionSelectByTicket(posTicket)

        } // for loop

      Comment(text);
      text="";
     } // if(barsTotal != bars && totalPos > 0)
  } // OnTick
